<!DOCTYPE html>
<html>
<head lang="en">
  <meta charset="UTF-8">
    <title>The Growth of a Nation</title>

    <!-- Libraries -->
    <script src="libs/d3/d3.min.js" charset="utf-8"></script>
    <script src="libs/jquery/jquery-2.1.1.min.js" charset="utf-8"></script>
    <script src="libs/bootstrap/js/bootstrap.min.js" charset="utf-8"></script>
    <script src="http://d3js.org/queue.v1.min.js"></script>

    <!-- Stylesheets -->
    <link rel="stylesheet" type="text/css" href="libs/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="css/myStyle.css">

    <!-- Fonts -->
    <link href='http://fonts.googleapis.com/css?family=PT+Sans:400,700' rel='stylesheet' type='text/css'>

    <!-- Vis Classes-->
    <script src = "js/chartvis.js"></script>
    <script src = "js/controlvis.js"></script>
    <script src = "js/infovis.js"></script>
    <script src = "js/mapvis.js"></script>
    <script src = "js/summaryvis.js"></script>

</head>
<body>
    <div class="container">
        <h1>The Growth of a Nation</h1>
        <h2>Or....how the railroads changed the face of America in the 1800's</h2>

        <div class="row">
            <div class="col-md-8 col-sm-12">
               <!-- If I have time to do a splash screen, I think it will go here  -->
               <p> The following visualization shows country, population and railroad growth in 19th Century America.</p> 
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
               <!-- I'm keeping this for now because I might want to use something like this -->
               <!-- <button class="btn btn-sm btn-primary" id="fitInBtn"> <span class="glyphicon glyphicon-resize-horizontal"></span> reset zoom </button> -->
            </div>

            <div class="col-md-8">
                <!-- Same here!  -->
                <!--  <b>current brush:</b> <span id="brushInfo"></span> -->
            </div>
        </div>



        <div class="row">
            <div class="col-md-2" id="infoVis">
            </div>

            <div class="col-md-8" id="mapVis">
            </div>
            <div class="col-md-2" id="chartVis">
            </div>
        </div>

        <div class="row">
           <div class="col-md-2" id="controlVis">
           <form class="displaySelection">
		   </form>
        </div>
            <div class="col-md-10" id="summaryVis">
            </div>
        </div>
    </div>



    <script>
        $(function(){ // this function is called after the HTML document is fully loaded
            //==========================================
            //--- HERE IS WHERE ALL THE MAGIC STARTS --
            //==========================================
            // variables keeping global knowledge of the data
            var allData = [];
            var metaData = {};
            var areaData = {};
            var countryMaps = {};
            var stateMaps = [];
            var countyMaps = [];
            var railMaps = {};
            var stateMappings = [];
            var summaryData = {};
            // this function can convert Date objects to a string
            // it can also convert strings to Date objects
            // see: https://github.com/mbostock/d3/wiki/Time-Formatting
            var dateFormatter = d3.time.format("%Y-%m-%d");
            // call this function after Data is loaded, reformatted and bound to the variables
            var initVis = function(){
                //TODO: Create an eventHandler  --> DONE :)
                var MyEventHandler = new Object();
                //TODO: Instantiate all Vis iObjects here

                //var map_vis = new MapVis(d3.select("#mapVis"), allData, stateMappings, countryMaps, stateMaps, countyMaps, railMaps, MyEventHandler);
                var chart_vis = new ChartVis(d3.select("#chartVis"), allData, MyEventHandler);
                //var summary_vis = new SummaryVis(d3.select("#summaryVis"), summaryData, stateMappings, MyEventHandler);
                var control_vis = new ControlVis(d3.select("#controlVis"), allData, MyEventHandler);


                // TODO: bind the eventHandler to the Vis Objects
                // events will be created from the CountVis object (nothing to do here)
                // events will be consumed by the PrioVis and AgeVis object (binding should happen here)

          $(MyEventHandler).bind("selectionChanged", function(event, encoding, tracks, year)
		  {
    	      chart_vis.onSelectionChange(encoding, tracks, year);
		      //info_vis.onSelectionChange(encoding, tracks, year);
		      map_vis.onSelectionChange(encoding, tracks, year);
		      summary_vis.onSelectionChange(encoding, tracks, year);







		      /*console.log("index.html");
			  console.log(encoding);
			  console.log(tracks);
			  console.log(year);*/
		  })


    }
            // call this function after both files are loaded -- error should be "null" if no error
            var dataLoaded = function (error, _states, _cityData, _countyData, _countyMap, _stateMap, _1800_CountryMap, _1810CountryMap, _1820CountryMap, _1830CountryMap, _1830RailMap, _1840CountryMap, _1840RailMap, _1850CountryMap, _1850RailMap, _1860CountryMap, _1860RailMap, _1870CountryMap, _1870RailMap, _1880CountryMap, _1880RailMap, _1890CountryMap, _1890RailMap, _1900CountryMap, _1900RailMap, _summary) {
              var that = this;
              if (!error) {
                  //console.log("here");
                    stateMappings = _states;
                    for(var i = 0; i<stateMappings.length;i++)
                    {
                        stateMappings[i]["Year"] = parseInt(stateMappings[i]["Year"]);
                        for(var j = 0;j<_stateMap.features.length;j++)
                        {
                            if(stateMappings[i]["ID"] == _stateMap.features[j].properties["STATE"])
                            { 
                                stateMappings[i]["Area"] = _stateMap.features[j].properties["CENSUSAREA"];
                                break;
                            }
                        }
                    }

                    
                    // make our data look nicer and more useful:
                    // per Day we want to have an object looking like this:
                    /*
                    * {
                    *   time: .. (should be a Date object)
                    *   count: .. (number of all votes)
                    *   prios: [..,..,..,...] (array of number of votes per priority -> array length =16)
                    *   ages: [..,..,..,..] (array counts of votes per age 0-99)
                    *
                    * */
                    //console.log(getIDbyName("Alabama"));

                    // We need to format our data so that it's consistent across formats for city and county.
                    for(var i = 0; i< _countyData.length; i++)
                    {
                      _countyData[i]["Name"] = _countyData[i]["County"] + " Co.";
                      _countyData[i]["StateCode"] = getCodebyName(_countyData[i]["State"]); 
                      _countyData[i]["Population"] = parseInt(_countyData[i]["Population"]);
                      _countyData[i]["Year"] = parseInt(_countyData[i]["Year"]);


                    }
                    
                    for(var i = 0; i< _cityData.length; i++)
                    {
                      _cityData[i]["Name"] = _cityData[i]["City"];
                      _cityData[i]["StateCode"] = _cityData[i]["State"];
                      _cityData[i]["Population"] = parseInt(_cityData[i]["Population"]);
                      _cityData[i]["Year"] = parseInt(_cityData[i]["Year"]);

                    }

                    for(var i = 0; i< _summary.length; i++)
                    {
                      _summary[i]["Population"] = parseInt(_summary[i]["Population"]);
                      _summary[i]["Year"] = parseInt(_summary[i]["Year"]);
                      _summary[i]["Area"] = parseInt(_summary[i]["Area"]);
                      _summary[i]["States"] = parseInt(_summary[i]["States"]);
                      _summary[i]["Tracks"] = parseInt(_summary[i]["Tracks"]);
                    }


                    var countyData = d3.nest()
                                    .key(function(d) {return getIDbyName(d.State);})
                                    .key(function(d) {return "counties";})
                                    .key(function(d) {return d.County})
                                    .key(function(d) { return d.Year})
                                    .map(_countyData);

                    var cityData = d3.nest()
                                    .key(function(d) {return getIDbyCode(d.State);})
                                    .key(function(d) {return "cities";})
                                    .key(function(d) {return d.City})
                                    .key(function(d) {return d.Year})
                                    .map(_cityData);
                    summaryData = d3.nest()
                                    .key(function(d) { return d.Year;})
                                    .map(_summary);
                    //console.log(summaryData);
                                 
                //    console.log(_countyData);
                  //  console.log(_cityData);
                                    //var tmpData = d3.merge(countyData, cityData);

                    // This is temporary until I figure out how to merge the two objects above.
                    allData = countyData;
                    countryMaps["1800"] = _1800_CountryMap;
                    countryMaps["1810"] = _1810CountryMap;
                    countryMaps["1820"] = _1820CountryMap;
                    countryMaps["1830"] = _1830CountryMap;
                    countryMaps["1840"] = _1840CountryMap;
                    countryMaps["1850"] = _1850CountryMap;
                    countryMaps["1860"] = _1860CountryMap;
                    countryMaps["1870"] = _1870CountryMap;
                    countryMaps["1880"] = _1880CountryMap;
                    countryMaps["1890"] = _1890CountryMap;
                    countryMaps["1900"] = _1900CountryMap;
                    countyMaps = _countyMap;
                    stateMaps = _stateMap;
                    railMaps["1830"] = _1830RailMap;
                    railMaps["1840"] = _1840RailMap;
                    railMaps["1850"] = _1850RailMap;
                    railMaps["1860"] = _1860RailMap;
                    railMaps["1870"] = _1870RailMap;
                    railMaps["1880"] = _1880RailMap;
                    railMaps["1890"] = _1890RailMap;
                    railMaps["1900"] = _1900RailMap;
                    //console.log(_stateMap);

                    //console.log(countryMaps);
                    //stateMaps =
                    //countyMaps =
                    //railMaps = 

                    for(var i in cityData)
                    {
                      countyData[i]["cities"] = cityData[i]["cities"];
                    }

                    /*for(var i = 0; i < 3_countyData.length;i++)
                    {
                        // If the key doesn't exist, create it
                        console.log(_countyData[i]["StateID"]);
                        console.log(areaData.map.get(_countyData[i]["StateID"]));

                    }*/                    

                    /*allData = _allData.map(function (d) {
                                var res = {
                                    time: dateFormatter.parse(d.day),
                                    count: parseInt(d["count(*)"])
                                };
                                // TODO: implement that  !!
                                res.prios = []
                                // should be an array of 16 numbers with the total count MAPping the prio values,
                                //  [d["sum(p0)"], d["sum(p1)"], d["sum(p2)"],...]
                                // Example:
                                // [10,200,500,... ]
                                // This is ONE way to create an array of length 100
                                // and set every value to "0")
                                res.ages = d3.range(0,100). map(function(){return 0;})
                                // TODO: Assign the count for each age to the index position
                                // eg: res.ages[22] should contain the count value for age 22
                                // BE AWARE THAT THE DATA MIGHT CONTAIN ages >99 which you have to handle especially
                                // final result:
                                // [0,0,0,..,1034,23,...] -- array length is 100
                                return res;
                            }
                    )
                    metaData = _metaData;*/
                    initVis();
                }
                else
                    console.log(error);
            }
            var startHere = function(){
                //TODO: load data here and call "dataLoaded" afterwards
                // Hint: http://giscollective.org/d3-queue-js/
                //startTime = new Date();
                var q = queue();
                q = q.defer(d3.csv, "data/stateID.csv");
                q = q.defer(d3.csv, "data/allcitydata.csv");
                q = q.defer(d3.csv, "data/allcountydata.csv");
                q = q.defer(d3.json, "data/county_outlines_20m.json");
                q = q.defer(d3.json, "data/state_outlines_20m.json");

                for(var year = 1800; year <= 1900;year=year + 10)
                {
                    q = q.defer(d3.json, "data/" + year + "_country.json");
                    if(year >= 1830)
                        q = q.defer(d3.json, "data/" + year + "_rail.json");
                }
                q = q.defer(d3.csv, "data/summary_data.csv"); 
                    q.await(dataLoaded);
                //var endTime = new Date();
                //var totalTime = endTime - startTime;
                //console.log("Time: " + Math.abs(endTime - startTime));
                //console.log("End time: " + endTime.toDateString());

               // bind reset zoom button to a function (-- ONLY FOR BONUS --)
                //d3.select("#fitInBtn").on("click", function() {
                    // TODO: -- ONLY FOR BONUS --
                //});
            }

            var getIDbyName = function(name)
            {
              for(var i = 0; i < stateMappings.length;i++)
                  if(stateMappings[i]["State"] == name)
                      return stateMappings[i]["ID"];
            }

            var getIDbyCode = function(code)
            { 
              for(var i = 0; i < stateMappings.length;i++)
                  if(stateMappings[i]["Code"] == code)
                      return stateMappings[i]["ID"];
            }

            var getCodebyName = function(name)
            {  
              for(var i = 0; i < stateMappings.length;i++)
                  if(stateMappings[i]["State"] == name)
                  {
                      return stateMappings[i]["Code"];
                  }
            }




            startHere();
        })
    </script>
</body>
</html>
